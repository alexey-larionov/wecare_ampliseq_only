fixed.df <- separate(fixed.df, "ANN", vep_fields, sep="\\|")
dim(fixed.df)
colnames(fixed.df)
fixed.df[1:5,1:7]
# Clean-up
rm(vep_fields)
?ppoints
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(vcfR) # for reading VCF
library(stringr) # for word (for VEP parsing)
library(tidyr) # for separate (for VEP parsing)
library(dplyr) # for renaming AC, AN and AF
base_folder="/Users/alexey/Documents/wecare/ampliseq/analysis4/s06_read_vcf_to_r"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Source VCF
vcf_file="/Users/alexey/Documents/wecare/ampliseq/analysis4/s04_annotated_vcf/ampliseq_nfe.vcf"
# Read vcf to vcfR object
vcfr <- read.vcfR(vcf_file)
# Clean-up
rm(vcf_file)
# Get data from header and fixed columns
meta_fix <- vcfR2tidy(vcfr, info_only=T)
# Get data frame with meta-information from vcf header
meta.df <- meta_fix$meta
dim(meta.df)
meta.df
# Get data frame with fixed columns (including parsed INFO, convert tibble to data-frame)
fixed.df <- as.data.frame(meta_fix$fix)
dim(fixed.df)
colnames(fixed.df)
fixed.df[1:5,1:7]
# Clean-up
rm(meta_fix)
summary(fixed.df$FILTER)
summary(as.factor(fixed.df$FILTER))
sort(summary(as.factor(fixed.df$FILTER)))
sort(summary(as.factor(fixed.df$FILTER)), decreasing = T)
sum(fixed.df$FILTER != "PASS")
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(vcfR) # for reading VCF
library(stringr) # for word (for VEP parsing)
library(tidyr) # for separate (for VEP parsing)
library(dplyr) # for renaming AC, AN and AF
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s06_read_vcf_to_r"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
graphics.off()
# Base folder
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s07_filter_genotypes_and_variants"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#setwd(base_folder)
data_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s06_read_vcf_to_r"
load(paste(data_folder, "s01_read_vcf_to_r.RData", sep="/"))
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s07_filter_genotypes_and_variants"
rm(data_folder, ad.mx)
x <- fixed.df$POS == 32914700
sum(x)
View(fixed.df[x,])
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(vcfR) # for reading VCF
library(stringr) # for word (for VEP parsing)
library(tidyr) # for separate (for VEP parsing)
library(dplyr) # for renaming AC, AN and AF
base_folder="/Users/alexey/Documents/wecare/ampliseq/v05_ampliseq_only/s06_read_vcf_to_r"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Source VCF
vcf_file="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s04_annotated_vcf/ampliseq_nfe.vcf"
# Read vcf to vcfR object
vcfr <- read.vcfR(vcf_file)
# Clean-up
rm(vcf_file)
# Get data from header and fixed columns
meta_fix <- vcfR2tidy(vcfr, info_only=T)
# Get data frame with meta-information from vcf header
meta.df <- meta_fix$meta
dim(meta.df)
meta.df
# Get data frame with fixed columns (including parsed INFO, convert tibble to data-frame)
fixed.df <- as.data.frame(meta_fix$fix)
dim(fixed.df)
colnames(fixed.df)
fixed.df[1:5,1:7]
# Clean-up
rm(meta_fix)
sort(summary(as.factor(fixed.df$FILTER)), decreasing = T)
sum(fixed.df$FILTER != "PASS")
# Rename AC, AN and AF
fixed.df <- fixed.df %>%
rename(init_AC = AC, init_AN = AN, init_AF = AF)
# Note fixed=T in strsplit: otherwise it would interpreted split as regex
vep_fields <- as.character(meta.df[meta.df$ID=="ANN","Description"])
vep_fields <- word(vep_fields,-1) # requires stringr
vep_fields <- strsplit(vep_fields, "|", fixed=T)
vep_fields <- unlist(vep_fields)
vep_fields
# Split ANN/CSQ column
# Note \\ in sep: this is because the separator is interpreted as regex
fixed.df <- separate(fixed.df, "ANN", vep_fields, sep="\\|")
dim(fixed.df)
colnames(fixed.df)
fixed.df[1:5,1:7]
# Clean-up
rm(vep_fields)
# Function to check for blanks in a vector
any_blank.udf <- function(x){any(x=="",na.rm=T)}
# Look up columns that contain blanks
x <- apply(fixed.df,2,any_blank.udf)
sum(x==T)
names(x[x==T]) # Most VEP fields
# Look at variants that contain blanks
y <- apply(fixed.df,1,any_blank.udf)
sum(y==T) # Each variant has a blank in at laest one field
# Recode blanks as NAs
NA -> fixed.df[fixed.df==""]
# Check for dots as NAs (empty Uploaded_variation field)
sum(fixed.df==".", na.rm=T)
# Clean-up
rm(any_blank.udf, x, y)
# Genotypes matrix with numeric representation of alleles
gt_num.mx <- extract.gt(vcfr) # original numeric codes: 0/1, 1/1 etc
dim(gt_num.mx)
gt_num.mx[1:5,6:10]
sum(is.na(gt_num.mx))
sum(!is.na(gt_num.mx))
sum(is.na(gt_num.mx)) / (nrow(gt_num.mx)*ncol(gt_num.mx))
# Genotypes matrix with alleles coded as ACGT
gt_chr.mx <- extract.gt(vcfr, return.alleles = TRUE) # encoded as A/A, T/G etc
dim(gt_chr.mx)
gt_chr.mx[1:5,6:10]
NA -> gt_chr.mx[gt_chr.mx=="."]
head(colnames(gt_chr.mx))
tail(colnames(gt_chr.mx))
dim(gt_chr.mx)
739-197
colnames(gt_chr.mx)[541:542]
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v05_ampliseq_only/s06_read_vcf_to_r"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
load(paste(base_folder, "s01_read_vcf_to_r.RData", sep="/"))
head(colnames(gt_chr.mx))
head(colnames(gt_chr.mx))
tail(colnames(gt_chr.mx))
739-197
colnames(gt_chr.mx)[541:542]
nfe <- c(542:739)
colnames(gt_chr.mx)[nfe]
length(nfe)
length(colnames(gt_chr.mx)[!nfe])
length(colnames(gt_chr.mx)[!nfe])
739-197
739-198
colnames(gt_chr.mx)[541:542]
head(colnames(gt_chr.mx))
tail(colnames(gt_chr.mx))
739-198
colnames(gt_chr.mx)[541:542]
ampliseq_samples <- c(1:541)
length(ampliseq_samples)
colnames(gt_chr.mx)[ampliseq_samples]
colnames(gt_chr.mx)[!ampliseq_samples]
length(nfe_samples)
tail(colnames(gt_chr.mx))
739-198
colnames(gt_chr.mx)[541:542]
ampliseq_samples <- c(1:541)
nfe_samples <- c(452:739)
length(ampliseq_samples)
length(nfe_samples)
nfe_samples <- c(542:739)
length(ampliseq_samples)
length(nfe_samples)
colnames(gt_chr.mx)[nfe_samples]
gt_add.mx <- gt_add.mx[,ampliseq_samples]
gt_num.mx <- gt_num.mx[,ampliseq_samples]
gt_chr.mx <- gt_chr.mx[,ampliseq_samples]
ref.mx <- ref.mx[,ampliseq_samples]
alt.mx <- alt.mx[,ampliseq_samples]
gq.mx <- gq.mx[,ampliseq_samples]
dp.mx <- dp.mx[,ampliseq_samples]
rm(ampliseq_samples,nfe_samples)
# Chunk 1: set_width
# eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v05_ampliseq_only/s06_read_vcf_to_r"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Chunk 3: read_vcfr
load(paste(base_folder, "s01_read_vcf_to_r.RData", sep="/"))
# Chunk 4: start_check
# List objects
ls()
# Check sizes
dim(gt_add.mx)
dim(gt_num.mx)
dim(gt_chr.mx)
dim(ref.mx)
dim(alt.mx)
dim(gq.mx)
dim(dp.mx)
dim(fixed.df)
colnames(fixed.df)
dim(meta.df)
# Check consistence of rownames and colnames
sum(rownames(gt_add.mx) != rownames(gt_num.mx))
sum(rownames(gt_add.mx) != rownames(gt_chr.mx))
sum(rownames(gt_add.mx) != rownames(ref.mx))
sum(rownames(gt_add.mx) != rownames(alt.mx))
sum(rownames(gt_add.mx) != rownames(gq.mx))
sum(rownames(gt_add.mx) != rownames(dp.mx))
sum(colnames(gt_add.mx) != colnames(gt_num.mx))
sum(colnames(gt_add.mx) != colnames(gt_chr.mx))
sum(colnames(gt_add.mx) != colnames(ref.mx))
sum(colnames(gt_add.mx) != colnames(alt.mx))
sum(colnames(gt_add.mx) != colnames(gq.mx))
sum(colnames(gt_add.mx) != colnames(dp.mx))
sum(rownames(gt_add.mx) != rownames(fixed.df))
# Chunk 5
head(colnames(gt_chr.mx))
tail(colnames(gt_chr.mx))
739-198
colnames(gt_chr.mx)[541:542]
ampliseq_samples <- c(1:541)
nfe_samples <- c(542:739)
length(ampliseq_samples)
length(nfe_samples)
colnames(gt_chr.mx)[ampliseq_samples]
colnames(gt_chr.mx)[nfe_samples]
gt_add.mx <- gt_add.mx[,ampliseq_samples]
gt_num.mx <- gt_num.mx[,ampliseq_samples]
gt_chr.mx <- gt_chr.mx[,ampliseq_samples]
ref.mx <- ref.mx[,ampliseq_samples]
alt.mx <- alt.mx[,ampliseq_samples]
gq.mx <- gq.mx[,ampliseq_samples]
dp.mx <- dp.mx[,ampliseq_samples]
rm(ampliseq_samples,nfe_samples)
# List objects
ls()
# Check sizes
dim(gt_add.mx)
dim(gt_num.mx)
dim(gt_chr.mx)
dim(ref.mx)
dim(alt.mx)
dim(gq.mx)
dim(dp.mx)
dim(fixed.df)
colnames(fixed.df)
dim(meta.df)
sum(rownames(gt_add.mx) != rownames(gt_num.mx))
sum(rownames(gt_add.mx) != rownames(gt_chr.mx))
sum(rownames(gt_add.mx) != rownames(ref.mx))
sum(rownames(gt_add.mx) != rownames(alt.mx))
sum(rownames(gt_add.mx) != rownames(gq.mx))
sum(rownames(gt_add.mx) != rownames(dp.mx))
sum(colnames(gt_add.mx) != colnames(gt_num.mx))
sum(colnames(gt_add.mx) != colnames(gt_chr.mx))
sum(colnames(gt_add.mx) != colnames(ref.mx))
sum(colnames(gt_add.mx) != colnames(alt.mx))
sum(colnames(gt_add.mx) != colnames(gq.mx))
sum(colnames(gt_add.mx) != colnames(dp.mx))
sum(rownames(gt_add.mx) != rownames(fixed.df))
# Chunk 1: set_width
# eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v05_ampliseq_only/s06_read_vcf_to_r"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Chunk 3: read_vcfr
load(paste(base_folder, "s01_read_vcf_to_r.RData", sep="/"))
# Chunk 4: start_check
# List objects
ls()
# Check sizes
dim(gt_add.mx)
dim(gt_num.mx)
dim(gt_chr.mx)
dim(ref.mx)
dim(alt.mx)
dim(gq.mx)
dim(dp.mx)
dim(fixed.df)
colnames(fixed.df)
dim(meta.df)
# Check consistence of rownames and colnames
sum(rownames(gt_add.mx) != rownames(gt_num.mx))
sum(rownames(gt_add.mx) != rownames(gt_chr.mx))
sum(rownames(gt_add.mx) != rownames(ref.mx))
sum(rownames(gt_add.mx) != rownames(alt.mx))
sum(rownames(gt_add.mx) != rownames(gq.mx))
sum(rownames(gt_add.mx) != rownames(dp.mx))
sum(colnames(gt_add.mx) != colnames(gt_num.mx))
sum(colnames(gt_add.mx) != colnames(gt_chr.mx))
sum(colnames(gt_add.mx) != colnames(ref.mx))
sum(colnames(gt_add.mx) != colnames(alt.mx))
sum(colnames(gt_add.mx) != colnames(gq.mx))
sum(colnames(gt_add.mx) != colnames(dp.mx))
sum(rownames(gt_add.mx) != rownames(fixed.df))
# Chunk 5
head(colnames(gt_chr.mx))
tail(colnames(gt_chr.mx))
739-198
colnames(gt_chr.mx)[541:542]
ampliseq_samples <- c(1:541)
nfe_samples <- c(542:739)
length(ampliseq_samples)
length(nfe_samples)
colnames(gt_chr.mx)[ampliseq_samples]
colnames(gt_chr.mx)[nfe_samples]
gt_add.mx <- gt_add.mx[,ampliseq_samples]
gt_num.mx <- gt_num.mx[,ampliseq_samples]
gt_chr.mx <- gt_chr.mx[,ampliseq_samples]
ref.mx <- ref.mx[,ampliseq_samples]
alt.mx <- alt.mx[,ampliseq_samples]
gq.mx <- gq.mx[,ampliseq_samples]
dp.mx <- dp.mx[,ampliseq_samples]
rm(ampliseq_samples,nfe_samples)
View(meta.df)
View(fixed.df)
ad.mx[1:5,1:5]
# Function to detect uniform numeric vectors
uniform.udf <- function(x){
if(all(is.na(x))) return(TRUE) # Return T if all are NA
min(x,na.rm=T)==max(x,na.rm=T)} # Return T if min=max, otherwise return F
gt_add.mx[1:5,1:5]
gt_num.mx[1:5,1:5]
# Make the filter
uniform_vars <- apply(gt_add.mx,1,uniform.udf)
sum(uniform_vars)
sum(!uniform_vars)
# Chunk 1: set_width
# eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v05_ampliseq_only/s06_read_vcf_to_r"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Chunk 3: read_vcfr
load(paste(base_folder, "s01_read_vcf_to_r.RData", sep="/"))
# Chunk 4: start_check
# List objects
ls()
# Check sizes
dim(gt_add.mx)
dim(gt_num.mx)
dim(gt_chr.mx)
dim(ref.mx)
dim(alt.mx)
dim(gq.mx)
dim(dp.mx)
dim(fixed.df)
colnames(fixed.df)
dim(meta.df)
# Check consistence of rownames and colnames
sum(rownames(gt_add.mx) != rownames(gt_num.mx))
sum(rownames(gt_add.mx) != rownames(gt_chr.mx))
sum(rownames(gt_add.mx) != rownames(ref.mx))
sum(rownames(gt_add.mx) != rownames(alt.mx))
sum(rownames(gt_add.mx) != rownames(gq.mx))
sum(rownames(gt_add.mx) != rownames(dp.mx))
sum(colnames(gt_add.mx) != colnames(gt_num.mx))
sum(colnames(gt_add.mx) != colnames(gt_chr.mx))
sum(colnames(gt_add.mx) != colnames(ref.mx))
sum(colnames(gt_add.mx) != colnames(alt.mx))
sum(colnames(gt_add.mx) != colnames(gq.mx))
sum(colnames(gt_add.mx) != colnames(dp.mx))
sum(rownames(gt_add.mx) != rownames(fixed.df))
# Chunk 5
head(colnames(gt_chr.mx))
tail(colnames(gt_chr.mx))
739-198
colnames(gt_chr.mx)[541:542]
ampliseq_samples <- c(1:541)
nfe_samples <- c(542:739)
length(ampliseq_samples)
length(nfe_samples)
colnames(gt_chr.mx)[ampliseq_samples]
colnames(gt_chr.mx)[nfe_samples]
gt_add.mx <- gt_add.mx[,ampliseq_samples]
gt_num.mx <- gt_num.mx[,ampliseq_samples]
gt_chr.mx <- gt_chr.mx[,ampliseq_samples]
ref.mx <- ref.mx[,ampliseq_samples]
alt.mx <- alt.mx[,ampliseq_samples]
gq.mx <- gq.mx[,ampliseq_samples]
dp.mx <- dp.mx[,ampliseq_samples]
rm(ampliseq_samples,nfe_samples)
# Function to detect uniform numeric vectors
uniform.udf <- function(x){
if(all(is.na(x))) return(TRUE) # Return T if all are NA
min(x,na.rm=T)==max(x,na.rm=T)} # Return T if min=max, otherwise return F
# Make the filter
uniform_vars <- apply(gt_add.mx,1,uniform.udf)
sum(uniform_vars)
sum(!uniform_vars)
# Apply filter
gt_add.mx <- gt_add.mx[!uniform_vars,]
gt_num.mx <- gt_num.mx[!uniform_vars,]
gt_chr.mx <- gt_chr.mx[!uniform_vars,]
ref.mx <- ref.mx[!uniform_vars,]
alt.mx <- alt.mx[!uniform_vars,]
gq.mx <- gq.mx[!uniform_vars,]
dp.mx <- dp.mx[!uniform_vars,]
fixed.df <- fixed.df[!uniform_vars,]
# Clean-up
rm(uniform.udf, uniform_vars)
# List objects
ls()
# Check sizes
dim(gt_add.mx)
dim(gt_num.mx)
dim(gt_chr.mx)
dim(ref.mx)
dim(alt.mx)
dim(gq.mx)
dim(dp.mx)
dim(fixed.df)
dim(meta.df)
sum(rownames(gt_add.mx) != rownames(gt_num.mx))
sum(rownames(gt_add.mx) != rownames(gt_chr.mx))
sum(rownames(gt_add.mx) != rownames(ref.mx))
sum(rownames(gt_add.mx) != rownames(alt.mx))
sum(rownames(gt_add.mx) != rownames(gq.mx))
sum(rownames(gt_add.mx) != rownames(dp.mx))
sum(colnames(gt_add.mx) != colnames(gt_num.mx))
sum(colnames(gt_add.mx) != colnames(gt_chr.mx))
sum(colnames(gt_add.mx) != colnames(ref.mx))
sum(colnames(gt_add.mx) != colnames(alt.mx))
sum(colnames(gt_add.mx) != colnames(gq.mx))
sum(colnames(gt_add.mx) != colnames(dp.mx))
sum(rownames(gt_add.mx) != rownames(fixed.df))
