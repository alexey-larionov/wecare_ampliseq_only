"CLIN_SIG",
"SIFT_call","SIFT_score","PolyPhen_call","PolyPhen_score",
"kgen.AC","kgen.AN","kgen.AF",
"kgen.AFR_AF","kgen.AMR_AF","kgen.EUR_AF","kgen.SAS_AF","kgen.EAS_AF",
"exac_non_TCGA.AC","exac_non_TCGA.AN","exac_non_TCGA.AF",
"exac_non_TCGA.AC_Adj","exac_non_TCGA.AC_MALE","exac_non_TCGA.AC_FEMALE",
"exac_non_TCGA.AC_AFR","exac_non_TCGA.AC_AMR","exac_non_TCGA.AC_NFE","exac_non_TCGA.AC_FIN",
"exac_non_TCGA.AC_SAS","exac_non_TCGA.AC_EAS",
"exac_non_TCGA.AN_Adj","exac_non_TCGA.AN_MALE","exac_non_TCGA.AN_FEMALE",
"exac_non_TCGA.AN_AFR","exac_non_TCGA.AN_AMR","exac_non_TCGA.AN_NFE","exac_non_TCGA.AN_FIN",
"exac_non_TCGA.AN_SAS","exac_non_TCGA.AN_EAS"
)
length(selected_annottions)
vars.df <- vars.df[,selected_annottions]
dim(vars.df)
# Clean-up
rm(selected_annottions)
str(vars.df, list.len=ncol(vars.df))
vars.df$init_AC <- as.integer(vars.df$init_AC)
vars.df$init_AF <- as.numeric(vars.df$init_AF)
vars.df$AS_VQSLOD <- as.numeric(vars.df$AS_VQSLOD)
vars.df$DISTANCE <- as.integer(vars.df$DISTANCE)
vars.df$STRAND <- as.integer(vars.df$STRAND)
vars.df$kgen.AC <- as.integer(vars.df$kgen.AC)
vars.df$kgen.AF <- as.numeric(vars.df$kgen.AF)
vars.df$kgen.AFR_AF <- as.numeric(vars.df$kgen.AFR_AF)
vars.df$kgen.AMR_AF <- as.numeric(vars.df$kgen.AMR_AF)
vars.df$kgen.EUR_AF <- as.numeric(vars.df$kgen.EUR_AF)
vars.df$kgen.SAS_AF <- as.numeric(vars.df$kgen.SAS_AF)
vars.df$kgen.EAS_AF <- as.numeric(vars.df$kgen.EAS_AF)
vars.df$exac_non_TCGA.AC <- as.integer(vars.df$exac_non_TCGA.AC)
vars.df$exac_non_TCGA.AF <- as.numeric(vars.df$exac_non_TCGA.AF)
vars.df$exac_non_TCGA.AC_Adj <- as.integer(vars.df$exac_non_TCGA.AC_Adj)
vars.df$exac_non_TCGA.AC_MALE <- as.integer(vars.df$exac_non_TCGA.AC_MALE)
vars.df$exac_non_TCGA.AC_FEMALE <- as.integer(vars.df$exac_non_TCGA.AC_FEMALE)
vars.df$exac_non_TCGA.AC_AFR <- as.integer(vars.df$exac_non_TCGA.AC_AFR)
vars.df$exac_non_TCGA.AC_AMR <- as.integer(vars.df$exac_non_TCGA.AC_AMR)
vars.df$exac_non_TCGA.AC_NFE <- as.integer(vars.df$exac_non_TCGA.AC_NFE)
vars.df$exac_non_TCGA.AC_FIN <- as.integer(vars.df$exac_non_TCGA.AC_FIN)
vars.df$exac_non_TCGA.AC_SAS <- as.integer(vars.df$exac_non_TCGA.AC_SAS)
vars.df$exac_non_TCGA.AC_EAS <- as.integer(vars.df$exac_non_TCGA.AC_EAS)
vars.df$exac_non_TCGA.AN_MALE <- as.integer(vars.df$exac_non_TCGA.AN_MALE)
vars.df$exac_non_TCGA.AN_FEMALE <- as.integer(vars.df$exac_non_TCGA.AN_FEMALE)
str(vars.df, list.len=ncol(vars.df))
# Chunk 1: set_width
# eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(dplyr)
library(tidyr) # for separate (parsing of cDNA, CDC and prot positions)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s08_reshape_variants_annotations"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F)
options(warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
library(HardyWeinberg) # for calculating HWE
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Chunk 3: read_data
load(paste(base_folder, "s01_clean_variants_annotations.RData", sep="/"))
# Chunk 4: start_check
ls()
dim(gt.mx)
dim(vars.df)
sum(rownames(gt.mx) != rownames(vars.df))
# Chunk 5: explore_udf
explore_field.udf <- function(field, field_separator){
a <- strsplit(as.vector(field),paste("\\",field_separator,sep=""))
b <- as.vector(unlist(a))
sort(table(as.vector(unlist(a))), decreasing = TRUE)
}
# Chunk 6: var_annotations
colnames(vars.df)
str(vars.df, list.len=ncol(vars.df))
# Chunk 7: explore_vars
# VEP consequence & Impact
explore_field.udf(vars.df$Consequence, "&")
sort(table(vars.df$IMPACT), decreasing=T)
# Were any of the variants downsampled?
table(vars.df$DS) # How some variants happened to be down-sampled ???
# InbreedingCoeff
hist(vars.df$InbreedingCoeff, ylim=c(0,2000), lab=T)
# ExcessHet
hist(vars.df$ExcessHet, ylim=c(0,2000), lab=T)
plot(-log10(vars.df$ExcessHet), main="- log10 ExcessHet", xlab="Variants")
abline(h=3, col="red", lty=2)
x <- which(-log10(vars.df$ExcessHet) > 3)
y <- -log10(vars.df$ExcessHet)[x]
text(x, y, labels=vars.df$SplitVarID[x],
pos=c(1,1,1,3,1,1,1,1,1,1), cex=0.5, offset=0.3)
# MLEAF
hist(as.numeric(vars.df$MLEAF),ylim=c(0,2000), lab=T)
# MLEAF
hist(vars.df$MQ,ylim=c(0,2000), lab=T)
# MultiAllelic
table(vars.df$Multiallelic)
# NEGATIVE_TRAIN_SITE
table(vars.df$NEGATIVE_TRAIN_SITE)
# POSITIVE_TRAIN_SITE
table(vars.df$POSITIVE_TRAIN_SITE)
# SIFT Polyphen
sort(table(vars.df$SIFT_call), decreasing=T)
sort(table(vars.df$PolyPhen_call), decreasing=T)
# VEP CLIN_SIG
sort(table(vars.df$CLIN_SIG), decreasing=T)[1:15]
sum(is.na(vars.df$CLIN_SIG))
explore_field.udf(vars.df$CLIN_SIG, "&")
# SYMBOL
sum(is.na(vars.df$SYMBOL))
# DISTANCE (Shortest distance from variant to transcript)
hist(as.numeric(vars.df$DISTANCE), lab=T, ylim=c(0,4))
table(as.numeric(vars.df$DISTANCE))
# STRAND
table(vars.df$STRAND)
# Clean-up
rm(x,y,explore_field.udf)
# Chunk 8: hwe
# Prepare genotypes counts
genotypes_counts <- MakeCounts(t(gt.mx),coding=c(0,1,2))
dim(genotypes_counts)
genotypes_counts[1:5,]
# Calculate HWE p-values
hwe <- HWExactStats(genotypes_counts[,1:3], verbose=FALSE)
# Remove HWE p from multiallelic variants
NA -> hwe[vars.df$Multiallelic]
sum(is.na(hwe))
# Plot HWE p-values
length(hwe)
names(hwe) <- rownames(gt.mx)
hwe[1:5]
min(hwe, na.rm=T)
max(hwe, na.rm=T)
hist(hwe)
plot(-log10(hwe), main="- log10 HWE", xlab="Variants")
abline(h=5, col="red", lty=2)
x <- which(-log10(hwe) > 5)
y <- -log10(hwe)[x]
text(x, y, labels=names(hwe)[x],
pos=c(3,1,1,2,4,3), cex=0.5, offset=0.2)
# Add hwe to vars.df
vars.df <- cbind(vars.df, hwe_biallelic=hwe)
colnames(vars.df)
# Clean-up (keep hwe and vars_bi.df)
rm(genotypes_counts, hwe, x, y)
hwe_violators <- vars.df$hwe_biallelic < 1e-5
sum(hwe_violators)
sum(hwe_violators, na.rm=T)
hwe_violators <- vars.df$hwe_biallelic < 1e-5
sum(hwe_violators, na.rm=T)
gt.mx <- gt.mx[!hwe_violators,]
vars.df <- vars.df[!hwe_violators,]
ls()
dim(gt.mx)
dim(vars.df)
sum(rownames(gt.mx) != rownames(vars.df))
hwe_violators <- vars.df$hwe_biallelic < 1e-5 & !is.na(vars.df$hwe_biallelic)
sum(hwe_violators)
# Chunk 1: set_width
# eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(dplyr)
library(tidyr) # for separate (parsing of cDNA, CDC and prot positions)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s08_reshape_variants_annotations"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F)
options(warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
library(HardyWeinberg) # for calculating HWE
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Chunk 3: read_data
load(paste(base_folder, "s01_clean_variants_annotations.RData", sep="/"))
# Chunk 4: start_check
ls()
dim(gt.mx)
dim(vars.df)
sum(rownames(gt.mx) != rownames(vars.df))
# Chunk 5: explore_udf
explore_field.udf <- function(field, field_separator){
a <- strsplit(as.vector(field),paste("\\",field_separator,sep=""))
b <- as.vector(unlist(a))
sort(table(as.vector(unlist(a))), decreasing = TRUE)
}
# Chunk 6: var_annotations
colnames(vars.df)
str(vars.df, list.len=ncol(vars.df))
# Chunk 7: explore_vars
# VEP consequence & Impact
explore_field.udf(vars.df$Consequence, "&")
sort(table(vars.df$IMPACT), decreasing=T)
# Were any of the variants downsampled?
table(vars.df$DS) # How some variants happened to be down-sampled ???
# InbreedingCoeff
hist(vars.df$InbreedingCoeff, ylim=c(0,2000), lab=T)
# ExcessHet
hist(vars.df$ExcessHet, ylim=c(0,2000), lab=T)
plot(-log10(vars.df$ExcessHet), main="- log10 ExcessHet", xlab="Variants")
abline(h=3, col="red", lty=2)
x <- which(-log10(vars.df$ExcessHet) > 3)
y <- -log10(vars.df$ExcessHet)[x]
text(x, y, labels=vars.df$SplitVarID[x],
pos=c(1,1,1,3,1,1,1,1,1,1), cex=0.5, offset=0.3)
# MLEAF
hist(as.numeric(vars.df$MLEAF),ylim=c(0,2000), lab=T)
# MLEAF
hist(vars.df$MQ,ylim=c(0,2000), lab=T)
# MultiAllelic
table(vars.df$Multiallelic)
# NEGATIVE_TRAIN_SITE
table(vars.df$NEGATIVE_TRAIN_SITE)
# POSITIVE_TRAIN_SITE
table(vars.df$POSITIVE_TRAIN_SITE)
# SIFT Polyphen
sort(table(vars.df$SIFT_call), decreasing=T)
sort(table(vars.df$PolyPhen_call), decreasing=T)
# VEP CLIN_SIG
sort(table(vars.df$CLIN_SIG), decreasing=T)[1:15]
sum(is.na(vars.df$CLIN_SIG))
explore_field.udf(vars.df$CLIN_SIG, "&")
# SYMBOL
sum(is.na(vars.df$SYMBOL))
# DISTANCE (Shortest distance from variant to transcript)
hist(as.numeric(vars.df$DISTANCE), lab=T, ylim=c(0,4))
table(as.numeric(vars.df$DISTANCE))
# STRAND
table(vars.df$STRAND)
# Clean-up
rm(x,y,explore_field.udf)
# Chunk 8: hwe
# Prepare genotypes counts
genotypes_counts <- MakeCounts(t(gt.mx),coding=c(0,1,2))
dim(genotypes_counts)
genotypes_counts[1:5,]
# Calculate HWE p-values
hwe <- HWExactStats(genotypes_counts[,1:3], verbose=FALSE)
# Remove HWE p from multiallelic variants
NA -> hwe[vars.df$Multiallelic]
sum(is.na(hwe))
# Plot HWE p-values
length(hwe)
names(hwe) <- rownames(gt.mx)
hwe[1:5]
min(hwe, na.rm=T)
max(hwe, na.rm=T)
hist(hwe)
plot(-log10(hwe), main="- log10 HWE", xlab="Variants")
abline(h=5, col="red", lty=2)
x <- which(-log10(hwe) > 5)
y <- -log10(hwe)[x]
text(x, y, labels=names(hwe)[x],
pos=c(3,1,1,2,4,3), cex=0.5, offset=0.2)
# Add hwe to vars.df
vars.df <- cbind(vars.df, hwe_biallelic=hwe)
colnames(vars.df)
# Clean-up (keep hwe and vars_bi.df)
rm(genotypes_counts, hwe, x, y)
hwe_violators <- vars.df$hwe_biallelic < 1e-5 & !is.na(vars.df$hwe_biallelic)
sum(hwe_violators)
gt.mx <- gt.mx[!hwe_violators,]
vars.df <- vars.df[!hwe_violators,]
ls()
dim(gt.mx)
dim(vars.df)
sum(rownames(gt.mx) != rownames(vars.df))
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(dplyr)
library(tidyr) # for separate (parsing of cDNA, CDC and prot positions)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s08_reshape_variants_annotations"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F)
options(warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
library(HardyWeinberg) # for calculating HWE
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
load(paste(base_folder, "s01_clean_variants_annotations.RData", sep="/"))
# Chunk 1: set_width
# eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(dplyr)
library(tidyr) # for separate (parsing of cDNA, CDC and prot positions)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s08_reshape_variants_annotations"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F)
options(warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
library(HardyWeinberg) # for calculating HWE
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Chunk 3: read_data
load(paste(base_folder, "s01_clean_variants_annotations.RData", sep="/"))
# Chunk 4: start_check
ls()
dim(gt.mx)
dim(vars.df)
sum(rownames(gt.mx) != rownames(vars.df))
# Chunk 5: explore_udf
explore_field.udf <- function(field, field_separator){
a <- strsplit(as.vector(field),paste("\\",field_separator,sep=""))
b <- as.vector(unlist(a))
sort(table(as.vector(unlist(a))), decreasing = TRUE)
}
# Chunk 6: var_annotations
colnames(vars.df)
str(vars.df, list.len=ncol(vars.df))
# Chunk 7: explore_vars
# VEP consequence & Impact
explore_field.udf(vars.df$Consequence, "&")
sort(table(vars.df$IMPACT), decreasing=T)
# Were any of the variants downsampled?
table(vars.df$DS) # How some variants happened to be down-sampled ???
# InbreedingCoeff
hist(vars.df$InbreedingCoeff, ylim=c(0,2000), lab=T)
# ExcessHet
hist(vars.df$ExcessHet, ylim=c(0,2000), lab=T)
plot(-log10(vars.df$ExcessHet), main="- log10 ExcessHet", xlab="Variants")
abline(h=3, col="red", lty=2)
x <- which(-log10(vars.df$ExcessHet) > 3)
y <- -log10(vars.df$ExcessHet)[x]
text(x, y, labels=vars.df$SplitVarID[x],
pos=c(1,1,1,3,1,1,1,1,1,1), cex=0.5, offset=0.3)
# MLEAF
hist(as.numeric(vars.df$MLEAF),ylim=c(0,2000), lab=T)
# MLEAF
hist(vars.df$MQ,ylim=c(0,2000), lab=T)
# MultiAllelic
table(vars.df$Multiallelic)
# NEGATIVE_TRAIN_SITE
table(vars.df$NEGATIVE_TRAIN_SITE)
# POSITIVE_TRAIN_SITE
table(vars.df$POSITIVE_TRAIN_SITE)
# SIFT Polyphen
sort(table(vars.df$SIFT_call), decreasing=T)
sort(table(vars.df$PolyPhen_call), decreasing=T)
# VEP CLIN_SIG
sort(table(vars.df$CLIN_SIG), decreasing=T)[1:15]
sum(is.na(vars.df$CLIN_SIG))
explore_field.udf(vars.df$CLIN_SIG, "&")
# SYMBOL
sum(is.na(vars.df$SYMBOL))
# DISTANCE (Shortest distance from variant to transcript)
hist(as.numeric(vars.df$DISTANCE), lab=T, ylim=c(0,4))
table(as.numeric(vars.df$DISTANCE))
# STRAND
table(vars.df$STRAND)
# Clean-up
rm(x,y,explore_field.udf)
# Chunk 8: hwe
# Prepare genotypes counts
genotypes_counts <- MakeCounts(t(gt.mx),coding=c(0,1,2))
dim(genotypes_counts)
genotypes_counts[1:5,]
# Calculate HWE p-values
hwe <- HWExactStats(genotypes_counts[,1:3], verbose=FALSE)
# Remove HWE p from multiallelic variants
NA -> hwe[vars.df$Multiallelic]
sum(is.na(hwe))
# Plot HWE p-values
length(hwe)
names(hwe) <- rownames(gt.mx)
hwe[1:5]
min(hwe, na.rm=T)
max(hwe, na.rm=T)
hist(hwe)
plot(-log10(hwe), main="- log10 HWE", xlab="Variants")
abline(h=5, col="red", lty=2)
x <- which(-log10(hwe) > 5)
y <- -log10(hwe)[x]
text(x, y, labels=names(hwe)[x],
pos=c(3,1,1,2,4,3), cex=0.5, offset=0.2)
# Add hwe to vars.df
vars.df <- cbind(vars.df, hwe_biallelic=hwe)
colnames(vars.df)
# Clean-up (keep hwe and vars_bi.df)
rm(genotypes_counts, hwe, x, y)
# Chunk 9
hwe_violators <- vars.df$hwe_biallelic < 1e-5 & !is.na(vars.df$hwe_biallelic)
sum(hwe_violators)
gt.mx <- gt.mx[!hwe_violators,]
vars.df <- vars.df[!hwe_violators,]
rm(hwe_violators)
# Chunk 10: final_check
ls()
dim(gt.mx)
dim(vars.df)
sum(rownames(gt.mx) != rownames(vars.df))
# Chunk 11: save_result
save.image(paste(base_folder, "s02_explore_annotations_add_hwe.RData", sep="/"))
# Chunk 12: final_section
ls()
sessionInfo()
Sys.time()
View(vars.df)
# Chunk 1: set_width
# eval=F
options(width = 999)
# https://stackoverflow.com/questions/36845178/width-of-r-code-chunk-output-in-rmarkdown-files-knitr-ed-to-html
# Chunk 2: start_section
Sys.time()
rm(list=ls())
graphics.off()
library(knitr)
library(dplyr)
library(tidyr) # for separate (parsing of cDNA, CDC and prot positions)
base_folder="/Users/alexey/Documents/wecare/ampliseq/v04_ampliseq_nfe/s08_reshape_variants_annotations"
opts_knit$set(root.dir = base_folder)
options(stringsAsFactors = F)
options(warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
#options(error = browser()) # Type Q or c to exit, drop browser level
# https://support.rstudio.com/hc/en-us/articles/200713843?version=1.1.456&mode=desktop
# https://stackoverflow.com/questions/13052522/how-to-leave-the-r-browser-mode-in-the-console-window/13052588
# Chunk 3: read_data
load(paste(base_folder, "s02_explore_annotations_add_hwe.RData", sep="/"))
# Chunk 4: start_check
ls()
dim(gt.mx)
dim(vars.df)
sum(rownames(gt.mx) != rownames(vars.df))
colnames(vars.df)
# Chunk 5: update_var_annotations
selected_annottions=c(
"SplitVarID","CHROM","POS","REF","ALT",
"SYMBOL","Consequence","DISTANCE","STRAND","IMPACT",
"Existing_variation","init_AC","init_AN","init_AF",
"QUAL","AS_VQSLOD","DP","DS","MQ",
"NEGATIVE_TRAIN_SITE","POSITIVE_TRAIN_SITE",
"hwe_biallelic","InbreedingCoeff","ExcessHet",
"Multiallelic",
"Allele",
"Codons","Amino_acids",
"cDNA_position","CDS_position","Protein_position",
"CLIN_SIG",
"SIFT_call","SIFT_score","PolyPhen_call","PolyPhen_score",
"kgen.AC","kgen.AN","kgen.AF",
"kgen.AFR_AF","kgen.AMR_AF","kgen.EUR_AF","kgen.SAS_AF","kgen.EAS_AF",
"exac_non_TCGA.AC","exac_non_TCGA.AN","exac_non_TCGA.AF",
"exac_non_TCGA.AC_Adj","exac_non_TCGA.AC_MALE","exac_non_TCGA.AC_FEMALE",
"exac_non_TCGA.AC_AFR","exac_non_TCGA.AC_AMR","exac_non_TCGA.AC_NFE","exac_non_TCGA.AC_FIN",
"exac_non_TCGA.AC_SAS","exac_non_TCGA.AC_EAS",
"exac_non_TCGA.AN_Adj","exac_non_TCGA.AN_MALE","exac_non_TCGA.AN_FEMALE",
"exac_non_TCGA.AN_AFR","exac_non_TCGA.AN_AMR","exac_non_TCGA.AN_NFE","exac_non_TCGA.AN_FIN",
"exac_non_TCGA.AN_SAS","exac_non_TCGA.AN_EAS"
)
length(selected_annottions)
vars.df <- vars.df[,selected_annottions]
dim(vars.df)
# Clean-up
rm(selected_annottions)
# Chunk 6: update_vars_types
str(vars.df, list.len=ncol(vars.df))
vars.df$init_AC <- as.integer(vars.df$init_AC)
vars.df$init_AF <- as.numeric(vars.df$init_AF)
vars.df$AS_VQSLOD <- as.numeric(vars.df$AS_VQSLOD)
vars.df$DISTANCE <- as.integer(vars.df$DISTANCE)
vars.df$STRAND <- as.integer(vars.df$STRAND)
vars.df$kgen.AC <- as.integer(vars.df$kgen.AC)
vars.df$kgen.AF <- as.numeric(vars.df$kgen.AF)
vars.df$kgen.AFR_AF <- as.numeric(vars.df$kgen.AFR_AF)
vars.df$kgen.AMR_AF <- as.numeric(vars.df$kgen.AMR_AF)
vars.df$kgen.EUR_AF <- as.numeric(vars.df$kgen.EUR_AF)
vars.df$kgen.SAS_AF <- as.numeric(vars.df$kgen.SAS_AF)
vars.df$kgen.EAS_AF <- as.numeric(vars.df$kgen.EAS_AF)
vars.df$exac_non_TCGA.AC <- as.integer(vars.df$exac_non_TCGA.AC)
vars.df$exac_non_TCGA.AF <- as.numeric(vars.df$exac_non_TCGA.AF)
vars.df$exac_non_TCGA.AC_Adj <- as.integer(vars.df$exac_non_TCGA.AC_Adj)
vars.df$exac_non_TCGA.AC_MALE <- as.integer(vars.df$exac_non_TCGA.AC_MALE)
vars.df$exac_non_TCGA.AC_FEMALE <- as.integer(vars.df$exac_non_TCGA.AC_FEMALE)
vars.df$exac_non_TCGA.AC_AFR <- as.integer(vars.df$exac_non_TCGA.AC_AFR)
vars.df$exac_non_TCGA.AC_AMR <- as.integer(vars.df$exac_non_TCGA.AC_AMR)
vars.df$exac_non_TCGA.AC_NFE <- as.integer(vars.df$exac_non_TCGA.AC_NFE)
vars.df$exac_non_TCGA.AC_FIN <- as.integer(vars.df$exac_non_TCGA.AC_FIN)
vars.df$exac_non_TCGA.AC_SAS <- as.integer(vars.df$exac_non_TCGA.AC_SAS)
vars.df$exac_non_TCGA.AC_EAS <- as.integer(vars.df$exac_non_TCGA.AC_EAS)
vars.df$exac_non_TCGA.AN_MALE <- as.integer(vars.df$exac_non_TCGA.AN_MALE)
vars.df$exac_non_TCGA.AN_FEMALE <- as.integer(vars.df$exac_non_TCGA.AN_FEMALE)
str(vars.df, list.len=ncol(vars.df))
# Chunk 7: final_check
ls()
dim(gt.mx)
dim(vars.df)
sum(rownames(gt.mx) != rownames(vars.df))
colnames(vars.df)
